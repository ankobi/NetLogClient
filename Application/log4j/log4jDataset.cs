//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
namespace NetLogClient.Log4j
{
	// 
	// This source code was auto-generated by xsd, Version=2.0.50727.42.
	// 


	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
	[Serializable()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.ComponentModel.ToolboxItem(true)]
	[System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
	[System.Xml.Serialization.XmlRootAttribute("NewDataSet")]
	[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
	public partial class NewDataSet : System.Data.DataSet
	{

		private _eventDataTable table_event;

		private messageDataTable tablemessage;

		private propertiesDataTable tableproperties;

		private dataDataTable tabledata;

		private throwableDataTable tablethrowable;

		private locationInfoDataTable tablelocationInfo;

		private System.Data.DataRelation relationevent_message;

		private System.Data.DataRelation relationevent_properties;

		private System.Data.DataRelation relationproperties_data;

		private System.Data.DataRelation relationevent_throwable;

		private System.Data.DataRelation relationevent_locationInfo;

		private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public NewDataSet()
		{
			this.BeginInit();
			this.InitClass();
			System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
			base.Tables.CollectionChanged += schemaChangedHandler;
			base.Relations.CollectionChanged += schemaChangedHandler;
			this.EndInit();
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected NewDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
			:
				base(info, context, false)
		{
			if ((this.IsBinarySerialized(info, context) == true))
			{
				this.InitVars(false);
				System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
				this.Tables.CollectionChanged += schemaChangedHandler1;
				this.Relations.CollectionChanged += schemaChangedHandler1;
				return;
			}
			string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
			if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema))
			{
				System.Data.DataSet ds = new System.Data.DataSet();
				ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
				if ((ds.Tables["event"] != null))
				{
					base.Tables.Add(new _eventDataTable(ds.Tables["event"]));
				}
				if ((ds.Tables["message"] != null))
				{
					base.Tables.Add(new messageDataTable(ds.Tables["message"]));
				}
				if ((ds.Tables["properties"] != null))
				{
					base.Tables.Add(new propertiesDataTable(ds.Tables["properties"]));
				}
				if ((ds.Tables["data"] != null))
				{
					base.Tables.Add(new dataDataTable(ds.Tables["data"]));
				}
				if ((ds.Tables["throwable"] != null))
				{
					base.Tables.Add(new throwableDataTable(ds.Tables["throwable"]));
				}
				if ((ds.Tables["locationInfo"] != null))
				{
					base.Tables.Add(new locationInfoDataTable(ds.Tables["locationInfo"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
				this.InitVars();
			}
			else
			{
				this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
			}
			this.GetSerializationData(info, context);
			System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
			base.Tables.CollectionChanged += schemaChangedHandler;
			this.Relations.CollectionChanged += schemaChangedHandler;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[System.ComponentModel.Browsable(false)]
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
		public _eventDataTable _event
		{
			get
			{
				return this.table_event;
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[System.ComponentModel.Browsable(false)]
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
		public messageDataTable message
		{
			get
			{
				return this.tablemessage;
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[System.ComponentModel.Browsable(false)]
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
		public propertiesDataTable properties
		{
			get
			{
				return this.tableproperties;
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[System.ComponentModel.Browsable(false)]
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
		public dataDataTable data
		{
			get
			{
				return this.tabledata;
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[System.ComponentModel.Browsable(false)]
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
		public throwableDataTable throwable
		{
			get
			{
				return this.tablethrowable;
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[System.ComponentModel.Browsable(false)]
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
		public locationInfoDataTable locationInfo
		{
			get
			{
				return this.tablelocationInfo;
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[System.ComponentModel.BrowsableAttribute(true)]
		[System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
		public override System.Data.SchemaSerializationMode SchemaSerializationMode
		{
			get
			{
				return this._schemaSerializationMode;
			}
			set
			{
				this._schemaSerializationMode = value;
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		public new System.Data.DataTableCollection Tables
		{
			get
			{
				return base.Tables;
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		[System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		public new System.Data.DataRelationCollection Relations
		{
			get
			{
				return base.Relations;
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected override void InitializeDerivedDataSet()
		{
			this.BeginInit();
			this.InitClass();
			this.EndInit();
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public override System.Data.DataSet Clone()
		{
			NewDataSet cln = ((NewDataSet)(base.Clone()));
			cln.InitVars();
			cln.SchemaSerializationMode = this.SchemaSerializationMode;
			return cln;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected override bool ShouldSerializeTables()
		{
			return false;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected override bool ShouldSerializeRelations()
		{
			return false;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected override void ReadXmlSerializable(System.Xml.XmlReader reader)
		{
			if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema))
			{
				this.Reset();
				System.Data.DataSet ds = new System.Data.DataSet();
				ds.ReadXml(reader);
				if ((ds.Tables["event"] != null))
				{
					base.Tables.Add(new _eventDataTable(ds.Tables["event"]));
				}
				if ((ds.Tables["message"] != null))
				{
					base.Tables.Add(new messageDataTable(ds.Tables["message"]));
				}
				if ((ds.Tables["properties"] != null))
				{
					base.Tables.Add(new propertiesDataTable(ds.Tables["properties"]));
				}
				if ((ds.Tables["data"] != null))
				{
					base.Tables.Add(new dataDataTable(ds.Tables["data"]));
				}
				if ((ds.Tables["throwable"] != null))
				{
					base.Tables.Add(new throwableDataTable(ds.Tables["throwable"]));
				}
				if ((ds.Tables["locationInfo"] != null))
				{
					base.Tables.Add(new locationInfoDataTable(ds.Tables["locationInfo"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
				this.InitVars();
			}
			else
			{
				this.ReadXml(reader);
				this.InitVars();
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		protected override System.Xml.Schema.XmlSchema GetSchemaSerializable()
		{
			System.IO.MemoryStream stream = new System.IO.MemoryStream();
			this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
			stream.Position = 0;
			return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		internal void InitVars()
		{
			this.InitVars(true);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		internal void InitVars(bool initTable)
		{
			this.table_event = ((_eventDataTable)(base.Tables["event"]));
			if ((initTable == true))
			{
				if ((this.table_event != null))
				{
					this.table_event.InitVars();
				}
			}
			this.tablemessage = ((messageDataTable)(base.Tables["message"]));
			if ((initTable == true))
			{
				if ((this.tablemessage != null))
				{
					this.tablemessage.InitVars();
				}
			}
			this.tableproperties = ((propertiesDataTable)(base.Tables["properties"]));
			if ((initTable == true))
			{
				if ((this.tableproperties != null))
				{
					this.tableproperties.InitVars();
				}
			}
			this.tabledata = ((dataDataTable)(base.Tables["data"]));
			if ((initTable == true))
			{
				if ((this.tabledata != null))
				{
					this.tabledata.InitVars();
				}
			}
			this.tablethrowable = ((throwableDataTable)(base.Tables["throwable"]));
			if ((initTable == true))
			{
				if ((this.tablethrowable != null))
				{
					this.tablethrowable.InitVars();
				}
			}
			this.tablelocationInfo = ((locationInfoDataTable)(base.Tables["locationInfo"]));
			if ((initTable == true))
			{
				if ((this.tablelocationInfo != null))
				{
					this.tablelocationInfo.InitVars();
				}
			}
			this.relationevent_message = this.Relations["event_message"];
			this.relationevent_properties = this.Relations["event_properties"];
			this.relationproperties_data = this.Relations["properties_data"];
			this.relationevent_throwable = this.Relations["event_throwable"];
			this.relationevent_locationInfo = this.Relations["event_locationInfo"];
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void InitClass()
		{
			this.DataSetName = "NewDataSet";
			this.Prefix = "";
			this.EnforceConstraints = true;
			this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
			this.table_event = new _eventDataTable();
			base.Tables.Add(this.table_event);
			this.tablemessage = new messageDataTable();
			base.Tables.Add(this.tablemessage);
			this.tableproperties = new propertiesDataTable();
			base.Tables.Add(this.tableproperties);
			this.tabledata = new dataDataTable();
			base.Tables.Add(this.tabledata);
			this.tablethrowable = new throwableDataTable();
			base.Tables.Add(this.tablethrowable);
			this.tablelocationInfo = new locationInfoDataTable();
			base.Tables.Add(this.tablelocationInfo);
			System.Data.ForeignKeyConstraint fkc;
			fkc = new System.Data.ForeignKeyConstraint("event_message", new System.Data.DataColumn[] {
                    this.table_event.event_IdColumn}, new System.Data.DataColumn[] {
                    this.tablemessage.event_IdColumn});
			this.tablemessage.Constraints.Add(fkc);
			fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
			fkc.DeleteRule = System.Data.Rule.Cascade;
			fkc.UpdateRule = System.Data.Rule.Cascade;
			fkc = new System.Data.ForeignKeyConstraint("event_properties", new System.Data.DataColumn[] {
                    this.table_event.event_IdColumn}, new System.Data.DataColumn[] {
                    this.tableproperties.event_IdColumn});
			this.tableproperties.Constraints.Add(fkc);
			fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
			fkc.DeleteRule = System.Data.Rule.Cascade;
			fkc.UpdateRule = System.Data.Rule.Cascade;
			fkc = new System.Data.ForeignKeyConstraint("properties_data", new System.Data.DataColumn[] {
                    this.tableproperties.properties_IdColumn}, new System.Data.DataColumn[] {
                    this.tabledata.properties_IdColumn});
			this.tabledata.Constraints.Add(fkc);
			fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
			fkc.DeleteRule = System.Data.Rule.Cascade;
			fkc.UpdateRule = System.Data.Rule.Cascade;
			fkc = new System.Data.ForeignKeyConstraint("event_throwable", new System.Data.DataColumn[] {
                    this.table_event.event_IdColumn}, new System.Data.DataColumn[] {
                    this.tablethrowable.event_IdColumn});
			this.tablethrowable.Constraints.Add(fkc);
			fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
			fkc.DeleteRule = System.Data.Rule.Cascade;
			fkc.UpdateRule = System.Data.Rule.Cascade;
			fkc = new System.Data.ForeignKeyConstraint("event_locationInfo", new System.Data.DataColumn[] {
                    this.table_event.event_IdColumn}, new System.Data.DataColumn[] {
                    this.tablelocationInfo.event_IdColumn});
			this.tablelocationInfo.Constraints.Add(fkc);
			fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
			fkc.DeleteRule = System.Data.Rule.Cascade;
			fkc.UpdateRule = System.Data.Rule.Cascade;
			this.relationevent_message = new System.Data.DataRelation("event_message", new System.Data.DataColumn[] {
                    this.table_event.event_IdColumn}, new System.Data.DataColumn[] {
                    this.tablemessage.event_IdColumn}, false);
			this.relationevent_message.Nested = true;
			this.Relations.Add(this.relationevent_message);
			this.relationevent_properties = new System.Data.DataRelation("event_properties", new System.Data.DataColumn[] {
                    this.table_event.event_IdColumn}, new System.Data.DataColumn[] {
                    this.tableproperties.event_IdColumn}, false);
			this.relationevent_properties.Nested = true;
			this.Relations.Add(this.relationevent_properties);
			this.relationproperties_data = new System.Data.DataRelation("properties_data", new System.Data.DataColumn[] {
                    this.tableproperties.properties_IdColumn}, new System.Data.DataColumn[] {
                    this.tabledata.properties_IdColumn}, false);
			this.relationproperties_data.Nested = true;
			this.Relations.Add(this.relationproperties_data);
			this.relationevent_throwable = new System.Data.DataRelation("event_throwable", new System.Data.DataColumn[] {
                    this.table_event.event_IdColumn}, new System.Data.DataColumn[] {
                    this.tablethrowable.event_IdColumn}, false);
			this.relationevent_throwable.Nested = true;
			this.Relations.Add(this.relationevent_throwable);
			this.relationevent_locationInfo = new System.Data.DataRelation("event_locationInfo", new System.Data.DataColumn[] {
                    this.table_event.event_IdColumn}, new System.Data.DataColumn[] {
                    this.tablelocationInfo.event_IdColumn}, false);
			this.relationevent_locationInfo.Nested = true;
			this.Relations.Add(this.relationevent_locationInfo);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private bool ShouldSerialize_event()
		{
			return false;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private bool ShouldSerializemessage()
		{
			return false;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private bool ShouldSerializeproperties()
		{
			return false;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private bool ShouldSerializedata()
		{
			return false;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private bool ShouldSerializethrowable()
		{
			return false;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private bool ShouldSerializelocationInfo()
		{
			return false;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
		{
			if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove))
			{
				this.InitVars();
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs)
		{
			NewDataSet ds = new NewDataSet();
			System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
			System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
			xs.Add(ds.GetSchemaSerializable());
			System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
			any.Namespace = ds.Namespace;
			sequence.Items.Add(any);
			type.Particle = sequence;
			return type;
		}

		public delegate void _eventRowChangeEventHandler(object sender, _eventRowChangeEvent e);

		public delegate void messageRowChangeEventHandler(object sender, messageRowChangeEvent e);

		public delegate void propertiesRowChangeEventHandler(object sender, propertiesRowChangeEvent e);

		public delegate void dataRowChangeEventHandler(object sender, dataRowChangeEvent e);

		public delegate void throwableRowChangeEventHandler(object sender, throwableRowChangeEvent e);

		public delegate void locationInfoRowChangeEventHandler(object sender, locationInfoRowChangeEvent e);

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		[System.Serializable()]
		[System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
		public partial class _eventDataTable : System.Data.DataTable, System.Collections.IEnumerable
		{

			private System.Data.DataColumn columnlogger;

			private System.Data.DataColumn columntimestamp;

			private System.Data.DataColumn columnlevel;

			private System.Data.DataColumn columnthread;

			private System.Data.DataColumn columnevent_Id;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public _eventDataTable()
			{
				this.TableName = "event";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal _eventDataTable(System.Data.DataTable table)
			{
				this.TableName = table.TableName;
				if ((table.CaseSensitive != table.DataSet.CaseSensitive))
				{
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
				{
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace))
				{
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected _eventDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
				:
					base(info, context)
			{
				this.InitVars();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn loggerColumn
			{
				get
				{
					return this.columnlogger;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn timestampColumn
			{
				get
				{
					return this.columntimestamp;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn levelColumn
			{
				get
				{
					return this.columnlevel;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn threadColumn
			{
				get
				{
					return this.columnthread;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn event_IdColumn
			{
				get
				{
					return this.columnevent_Id;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.ComponentModel.Browsable(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public _eventRow this[int index]
			{
				get
				{
					return ((_eventRow)(this.Rows[index]));
				}
			}

			public event _eventRowChangeEventHandler _eventRowChanging;

			public event _eventRowChangeEventHandler _eventRowChanged;

			public event _eventRowChangeEventHandler _eventRowDeleting;

			public event _eventRowChangeEventHandler _eventRowDeleted;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void Add_eventRow(_eventRow row)
			{
				this.Rows.Add(row);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public _eventRow Add_eventRow(string logger, string timestamp, string level, string thread)
			{
				_eventRow row_eventRow = ((_eventRow)(this.NewRow()));
				row_eventRow.ItemArray = new object[] {
                    logger,
                    timestamp,
                    level,
                    thread,
                    null};
				this.Rows.Add(row_eventRow);
				return row_eventRow;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public virtual System.Collections.IEnumerator GetEnumerator()
			{
				return this.Rows.GetEnumerator();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public override System.Data.DataTable Clone()
			{
				_eventDataTable cln = ((_eventDataTable)(base.Clone()));
				cln.InitVars();
				return cln;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override System.Data.DataTable CreateInstance()
			{
				return new _eventDataTable();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal void InitVars()
			{
				this.columnlogger = base.Columns["logger"];
				this.columntimestamp = base.Columns["timestamp"];
				this.columnlevel = base.Columns["level"];
				this.columnthread = base.Columns["thread"];
				this.columnevent_Id = base.Columns["event_Id"];
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			private void InitClass()
			{
				this.columnlogger = new System.Data.DataColumn("logger", typeof(string), null, System.Data.MappingType.Attribute);
				base.Columns.Add(this.columnlogger);
				this.columntimestamp = new System.Data.DataColumn("timestamp", typeof(string), null, System.Data.MappingType.Attribute);
				base.Columns.Add(this.columntimestamp);
				this.columnlevel = new System.Data.DataColumn("level", typeof(string), null, System.Data.MappingType.Attribute);
				base.Columns.Add(this.columnlevel);
				this.columnthread = new System.Data.DataColumn("thread", typeof(string), null, System.Data.MappingType.Attribute);
				base.Columns.Add(this.columnthread);
				this.columnevent_Id = new System.Data.DataColumn("event_Id", typeof(int), null, System.Data.MappingType.Hidden);
				base.Columns.Add(this.columnevent_Id);
				this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                            this.columnevent_Id}, true));
				this.columnlogger.Namespace = "";
				this.columntimestamp.Namespace = "";
				this.columnlevel.Namespace = "";
				this.columnthread.Namespace = "";
				this.columnevent_Id.AutoIncrement = true;
				this.columnevent_Id.AllowDBNull = false;
				this.columnevent_Id.Unique = true;
				this.ExtendedProperties.Add("Generator_RowClassName", "_eventRow");
				this.ExtendedProperties.Add("Generator_RowEvArgName", "_eventRowChangeEvent");
				this.ExtendedProperties.Add("Generator_RowEvHandlerName", "_eventRowChangeEventHandler");
				this.ExtendedProperties.Add("Generator_TableClassName", "_eventDataTable");
				this.ExtendedProperties.Add("Generator_TablePropName", "_event");
				this.ExtendedProperties.Add("Generator_TableVarName", "table_event");
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public _eventRow New_eventRow()
			{
				return ((_eventRow)(this.NewRow()));
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
			{
				return new _eventRow(builder);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override System.Type GetRowType()
			{
				return typeof(_eventRow);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this._eventRowChanged != null))
				{
					this._eventRowChanged(this, new _eventRowChangeEvent(((_eventRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this._eventRowChanging != null))
				{
					this._eventRowChanging(this, new _eventRowChangeEvent(((_eventRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this._eventRowDeleted != null))
				{
					this._eventRowDeleted(this, new _eventRowChangeEvent(((_eventRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this._eventRowDeleting != null))
				{
					this._eventRowDeleting(this, new _eventRowChangeEvent(((_eventRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void Remove_eventRow(_eventRow row)
			{
				this.Rows.Remove(row);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
			{
				System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
				System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
				NewDataSet ds = new NewDataSet();
				xs.Add(ds.GetSchemaSerializable());
				System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "_eventDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				return type;
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		[System.Serializable()]
		[System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
		public partial class messageDataTable : System.Data.DataTable, System.Collections.IEnumerable
		{

			private System.Data.DataColumn columnmessage_Text;

			private System.Data.DataColumn columnevent_Id;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public messageDataTable()
			{
				this.TableName = "message";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal messageDataTable(System.Data.DataTable table)
			{
				this.TableName = table.TableName;
				if ((table.CaseSensitive != table.DataSet.CaseSensitive))
				{
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
				{
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace))
				{
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected messageDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
				:
					base(info, context)
			{
				this.InitVars();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn message_TextColumn
			{
				get
				{
					return this.columnmessage_Text;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn event_IdColumn
			{
				get
				{
					return this.columnevent_Id;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.ComponentModel.Browsable(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public messageRow this[int index]
			{
				get
				{
					return ((messageRow)(this.Rows[index]));
				}
			}

			public event messageRowChangeEventHandler messageRowChanging;

			public event messageRowChangeEventHandler messageRowChanged;

			public event messageRowChangeEventHandler messageRowDeleting;

			public event messageRowChangeEventHandler messageRowDeleted;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void AddmessageRow(messageRow row)
			{
				this.Rows.Add(row);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public messageRow AddmessageRow(string message_Text, _eventRow parent_eventRowByevent_message)
			{
				messageRow rowmessageRow = ((messageRow)(this.NewRow()));
				rowmessageRow.ItemArray = new object[] {
                    message_Text,
                    parent_eventRowByevent_message[4]};
				this.Rows.Add(rowmessageRow);
				return rowmessageRow;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public virtual System.Collections.IEnumerator GetEnumerator()
			{
				return this.Rows.GetEnumerator();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public override System.Data.DataTable Clone()
			{
				messageDataTable cln = ((messageDataTable)(base.Clone()));
				cln.InitVars();
				return cln;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override System.Data.DataTable CreateInstance()
			{
				return new messageDataTable();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal void InitVars()
			{
				this.columnmessage_Text = base.Columns["message_Text"];
				this.columnevent_Id = base.Columns["event_Id"];
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			private void InitClass()
			{
				this.columnmessage_Text = new System.Data.DataColumn("message_Text", typeof(string), null, System.Data.MappingType.SimpleContent);
				base.Columns.Add(this.columnmessage_Text);
				this.columnevent_Id = new System.Data.DataColumn("event_Id", typeof(int), null, System.Data.MappingType.Hidden);
				base.Columns.Add(this.columnevent_Id);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public messageRow NewmessageRow()
			{
				return ((messageRow)(this.NewRow()));
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
			{
				return new messageRow(builder);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override System.Type GetRowType()
			{
				return typeof(messageRow);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.messageRowChanged != null))
				{
					this.messageRowChanged(this, new messageRowChangeEvent(((messageRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.messageRowChanging != null))
				{
					this.messageRowChanging(this, new messageRowChangeEvent(((messageRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.messageRowDeleted != null))
				{
					this.messageRowDeleted(this, new messageRowChangeEvent(((messageRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.messageRowDeleting != null))
				{
					this.messageRowDeleting(this, new messageRowChangeEvent(((messageRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void RemovemessageRow(messageRow row)
			{
				this.Rows.Remove(row);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
			{
				System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
				System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
				NewDataSet ds = new NewDataSet();
				xs.Add(ds.GetSchemaSerializable());
				System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "messageDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				return type;
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		[System.Serializable()]
		[System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
		public partial class propertiesDataTable : System.Data.DataTable, System.Collections.IEnumerable
		{

			private System.Data.DataColumn columnproperties_Id;

			private System.Data.DataColumn columnevent_Id;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public propertiesDataTable()
			{
				this.TableName = "properties";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal propertiesDataTable(System.Data.DataTable table)
			{
				this.TableName = table.TableName;
				if ((table.CaseSensitive != table.DataSet.CaseSensitive))
				{
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
				{
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace))
				{
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected propertiesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
				:
					base(info, context)
			{
				this.InitVars();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn properties_IdColumn
			{
				get
				{
					return this.columnproperties_Id;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn event_IdColumn
			{
				get
				{
					return this.columnevent_Id;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.ComponentModel.Browsable(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public propertiesRow this[int index]
			{
				get
				{
					return ((propertiesRow)(this.Rows[index]));
				}
			}

			public event propertiesRowChangeEventHandler propertiesRowChanging;

			public event propertiesRowChangeEventHandler propertiesRowChanged;

			public event propertiesRowChangeEventHandler propertiesRowDeleting;

			public event propertiesRowChangeEventHandler propertiesRowDeleted;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void AddpropertiesRow(propertiesRow row)
			{
				this.Rows.Add(row);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public propertiesRow AddpropertiesRow(_eventRow parent_eventRowByevent_properties)
			{
				propertiesRow rowpropertiesRow = ((propertiesRow)(this.NewRow()));
				rowpropertiesRow.ItemArray = new object[] {
                    null,
                    parent_eventRowByevent_properties[4]};
				this.Rows.Add(rowpropertiesRow);
				return rowpropertiesRow;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public virtual System.Collections.IEnumerator GetEnumerator()
			{
				return this.Rows.GetEnumerator();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public override System.Data.DataTable Clone()
			{
				propertiesDataTable cln = ((propertiesDataTable)(base.Clone()));
				cln.InitVars();
				return cln;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override System.Data.DataTable CreateInstance()
			{
				return new propertiesDataTable();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal void InitVars()
			{
				this.columnproperties_Id = base.Columns["properties_Id"];
				this.columnevent_Id = base.Columns["event_Id"];
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			private void InitClass()
			{
				this.columnproperties_Id = new System.Data.DataColumn("properties_Id", typeof(int), null, System.Data.MappingType.Hidden);
				base.Columns.Add(this.columnproperties_Id);
				this.columnevent_Id = new System.Data.DataColumn("event_Id", typeof(int), null, System.Data.MappingType.Hidden);
				base.Columns.Add(this.columnevent_Id);
				this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                            this.columnproperties_Id}, true));
				this.columnproperties_Id.AutoIncrement = true;
				this.columnproperties_Id.AllowDBNull = false;
				this.columnproperties_Id.Unique = true;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public propertiesRow NewpropertiesRow()
			{
				return ((propertiesRow)(this.NewRow()));
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
			{
				return new propertiesRow(builder);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override System.Type GetRowType()
			{
				return typeof(propertiesRow);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.propertiesRowChanged != null))
				{
					this.propertiesRowChanged(this, new propertiesRowChangeEvent(((propertiesRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.propertiesRowChanging != null))
				{
					this.propertiesRowChanging(this, new propertiesRowChangeEvent(((propertiesRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.propertiesRowDeleted != null))
				{
					this.propertiesRowDeleted(this, new propertiesRowChangeEvent(((propertiesRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.propertiesRowDeleting != null))
				{
					this.propertiesRowDeleting(this, new propertiesRowChangeEvent(((propertiesRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void RemovepropertiesRow(propertiesRow row)
			{
				this.Rows.Remove(row);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
			{
				System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
				System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
				NewDataSet ds = new NewDataSet();
				xs.Add(ds.GetSchemaSerializable());
				System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "propertiesDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				return type;
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		[System.Serializable()]
		[System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
		public partial class dataDataTable : System.Data.DataTable, System.Collections.IEnumerable
		{

			private System.Data.DataColumn columnname;

			private System.Data.DataColumn columnvalue;

			private System.Data.DataColumn columnproperties_Id;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public dataDataTable()
			{
				this.TableName = "data";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal dataDataTable(System.Data.DataTable table)
			{
				this.TableName = table.TableName;
				if ((table.CaseSensitive != table.DataSet.CaseSensitive))
				{
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
				{
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace))
				{
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected dataDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
				:
					base(info, context)
			{
				this.InitVars();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn nameColumn
			{
				get
				{
					return this.columnname;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn valueColumn
			{
				get
				{
					return this.columnvalue;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn properties_IdColumn
			{
				get
				{
					return this.columnproperties_Id;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.ComponentModel.Browsable(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public dataRow this[int index]
			{
				get
				{
					return ((dataRow)(this.Rows[index]));
				}
			}

			public event dataRowChangeEventHandler dataRowChanging;

			public event dataRowChangeEventHandler dataRowChanged;

			public event dataRowChangeEventHandler dataRowDeleting;

			public event dataRowChangeEventHandler dataRowDeleted;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void AdddataRow(dataRow row)
			{
				this.Rows.Add(row);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public dataRow AdddataRow(string name, string value, propertiesRow parentpropertiesRowByproperties_data)
			{
				dataRow rowdataRow = ((dataRow)(this.NewRow()));
				rowdataRow.ItemArray = new object[] {
                    name,
                    value,
                    parentpropertiesRowByproperties_data[0]};
				this.Rows.Add(rowdataRow);
				return rowdataRow;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public virtual System.Collections.IEnumerator GetEnumerator()
			{
				return this.Rows.GetEnumerator();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public override System.Data.DataTable Clone()
			{
				dataDataTable cln = ((dataDataTable)(base.Clone()));
				cln.InitVars();
				return cln;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override System.Data.DataTable CreateInstance()
			{
				return new dataDataTable();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal void InitVars()
			{
				this.columnname = base.Columns["name"];
				this.columnvalue = base.Columns["value"];
				this.columnproperties_Id = base.Columns["properties_Id"];
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			private void InitClass()
			{
				this.columnname = new System.Data.DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
				base.Columns.Add(this.columnname);
				this.columnvalue = new System.Data.DataColumn("value", typeof(string), null, System.Data.MappingType.Attribute);
				base.Columns.Add(this.columnvalue);
				this.columnproperties_Id = new System.Data.DataColumn("properties_Id", typeof(int), null, System.Data.MappingType.Hidden);
				base.Columns.Add(this.columnproperties_Id);
				this.columnname.Namespace = "";
				this.columnvalue.Namespace = "";
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public dataRow NewdataRow()
			{
				return ((dataRow)(this.NewRow()));
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
			{
				return new dataRow(builder);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override System.Type GetRowType()
			{
				return typeof(dataRow);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.dataRowChanged != null))
				{
					this.dataRowChanged(this, new dataRowChangeEvent(((dataRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.dataRowChanging != null))
				{
					this.dataRowChanging(this, new dataRowChangeEvent(((dataRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.dataRowDeleted != null))
				{
					this.dataRowDeleted(this, new dataRowChangeEvent(((dataRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.dataRowDeleting != null))
				{
					this.dataRowDeleting(this, new dataRowChangeEvent(((dataRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void RemovedataRow(dataRow row)
			{
				this.Rows.Remove(row);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
			{
				System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
				System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
				NewDataSet ds = new NewDataSet();
				xs.Add(ds.GetSchemaSerializable());
				System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "dataDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				return type;
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		[System.Serializable()]
		[System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
		public partial class throwableDataTable : System.Data.DataTable, System.Collections.IEnumerable
		{

			private System.Data.DataColumn columnthrowable_Text;

			private System.Data.DataColumn columnevent_Id;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public throwableDataTable()
			{
				this.TableName = "throwable";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal throwableDataTable(System.Data.DataTable table)
			{
				this.TableName = table.TableName;
				if ((table.CaseSensitive != table.DataSet.CaseSensitive))
				{
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
				{
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace))
				{
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected throwableDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
				:
					base(info, context)
			{
				this.InitVars();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn throwable_TextColumn
			{
				get
				{
					return this.columnthrowable_Text;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn event_IdColumn
			{
				get
				{
					return this.columnevent_Id;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.ComponentModel.Browsable(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public throwableRow this[int index]
			{
				get
				{
					return ((throwableRow)(this.Rows[index]));
				}
			}

			public event throwableRowChangeEventHandler throwableRowChanging;

			public event throwableRowChangeEventHandler throwableRowChanged;

			public event throwableRowChangeEventHandler throwableRowDeleting;

			public event throwableRowChangeEventHandler throwableRowDeleted;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void AddthrowableRow(throwableRow row)
			{
				this.Rows.Add(row);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public throwableRow AddthrowableRow(string throwable_Text, _eventRow parent_eventRowByevent_throwable)
			{
				throwableRow rowthrowableRow = ((throwableRow)(this.NewRow()));
				rowthrowableRow.ItemArray = new object[] {
                    throwable_Text,
                    parent_eventRowByevent_throwable[4]};
				this.Rows.Add(rowthrowableRow);
				return rowthrowableRow;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public virtual System.Collections.IEnumerator GetEnumerator()
			{
				return this.Rows.GetEnumerator();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public override System.Data.DataTable Clone()
			{
				throwableDataTable cln = ((throwableDataTable)(base.Clone()));
				cln.InitVars();
				return cln;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override System.Data.DataTable CreateInstance()
			{
				return new throwableDataTable();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal void InitVars()
			{
				this.columnthrowable_Text = base.Columns["throwable_Text"];
				this.columnevent_Id = base.Columns["event_Id"];
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			private void InitClass()
			{
				this.columnthrowable_Text = new System.Data.DataColumn("throwable_Text", typeof(string), null, System.Data.MappingType.SimpleContent);
				base.Columns.Add(this.columnthrowable_Text);
				this.columnevent_Id = new System.Data.DataColumn("event_Id", typeof(int), null, System.Data.MappingType.Hidden);
				base.Columns.Add(this.columnevent_Id);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public throwableRow NewthrowableRow()
			{
				return ((throwableRow)(this.NewRow()));
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
			{
				return new throwableRow(builder);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override System.Type GetRowType()
			{
				return typeof(throwableRow);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.throwableRowChanged != null))
				{
					this.throwableRowChanged(this, new throwableRowChangeEvent(((throwableRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.throwableRowChanging != null))
				{
					this.throwableRowChanging(this, new throwableRowChangeEvent(((throwableRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.throwableRowDeleted != null))
				{
					this.throwableRowDeleted(this, new throwableRowChangeEvent(((throwableRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.throwableRowDeleting != null))
				{
					this.throwableRowDeleting(this, new throwableRowChangeEvent(((throwableRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void RemovethrowableRow(throwableRow row)
			{
				this.Rows.Remove(row);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
			{
				System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
				System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
				NewDataSet ds = new NewDataSet();
				xs.Add(ds.GetSchemaSerializable());
				System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "throwableDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				return type;
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		[System.Serializable()]
		[System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
		public partial class locationInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable
		{

			private System.Data.DataColumn column_class;

			private System.Data.DataColumn columnmethod;

			private System.Data.DataColumn columnfile;

			private System.Data.DataColumn columnline;

			private System.Data.DataColumn columnevent_Id;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public locationInfoDataTable()
			{
				this.TableName = "locationInfo";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal locationInfoDataTable(System.Data.DataTable table)
			{
				this.TableName = table.TableName;
				if ((table.CaseSensitive != table.DataSet.CaseSensitive))
				{
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
				{
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace))
				{
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected locationInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
				:
					base(info, context)
			{
				this.InitVars();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn _classColumn
			{
				get
				{
					return this.column_class;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn methodColumn
			{
				get
				{
					return this.columnmethod;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn fileColumn
			{
				get
				{
					return this.columnfile;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn lineColumn
			{
				get
				{
					return this.columnline;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataColumn event_IdColumn
			{
				get
				{
					return this.columnevent_Id;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.ComponentModel.Browsable(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public locationInfoRow this[int index]
			{
				get
				{
					return ((locationInfoRow)(this.Rows[index]));
				}
			}

			public event locationInfoRowChangeEventHandler locationInfoRowChanging;

			public event locationInfoRowChangeEventHandler locationInfoRowChanged;

			public event locationInfoRowChangeEventHandler locationInfoRowDeleting;

			public event locationInfoRowChangeEventHandler locationInfoRowDeleted;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void AddlocationInfoRow(locationInfoRow row)
			{
				this.Rows.Add(row);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public locationInfoRow AddlocationInfoRow(string _class, string method, string file, string line, _eventRow parent_eventRowByevent_locationInfo)
			{
				locationInfoRow rowlocationInfoRow = ((locationInfoRow)(this.NewRow()));
				rowlocationInfoRow.ItemArray = new object[] {
                    _class,
                    method,
                    file,
                    line,
                    parent_eventRowByevent_locationInfo[4]};
				this.Rows.Add(rowlocationInfoRow);
				return rowlocationInfoRow;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public virtual System.Collections.IEnumerator GetEnumerator()
			{
				return this.Rows.GetEnumerator();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public override System.Data.DataTable Clone()
			{
				locationInfoDataTable cln = ((locationInfoDataTable)(base.Clone()));
				cln.InitVars();
				return cln;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override System.Data.DataTable CreateInstance()
			{
				return new locationInfoDataTable();
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal void InitVars()
			{
				this.column_class = base.Columns["class"];
				this.columnmethod = base.Columns["method"];
				this.columnfile = base.Columns["file"];
				this.columnline = base.Columns["line"];
				this.columnevent_Id = base.Columns["event_Id"];
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			private void InitClass()
			{
				this.column_class = new System.Data.DataColumn("class", typeof(string), null, System.Data.MappingType.Attribute);
				this.column_class.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_class");
				this.column_class.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_classColumn");
				this.column_class.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_class");
				this.column_class.ExtendedProperties.Add("Generator_UserColumnName", "class");
				base.Columns.Add(this.column_class);
				this.columnmethod = new System.Data.DataColumn("method", typeof(string), null, System.Data.MappingType.Attribute);
				base.Columns.Add(this.columnmethod);
				this.columnfile = new System.Data.DataColumn("file", typeof(string), null, System.Data.MappingType.Attribute);
				base.Columns.Add(this.columnfile);
				this.columnline = new System.Data.DataColumn("line", typeof(string), null, System.Data.MappingType.Attribute);
				base.Columns.Add(this.columnline);
				this.columnevent_Id = new System.Data.DataColumn("event_Id", typeof(int), null, System.Data.MappingType.Hidden);
				base.Columns.Add(this.columnevent_Id);
				this.column_class.Namespace = "";
				this.columnmethod.Namespace = "";
				this.columnfile.Namespace = "";
				this.columnline.Namespace = "";
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public locationInfoRow NewlocationInfoRow()
			{
				return ((locationInfoRow)(this.NewRow()));
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
			{
				return new locationInfoRow(builder);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override System.Type GetRowType()
			{
				return typeof(locationInfoRow);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.locationInfoRowChanged != null))
				{
					this.locationInfoRowChanged(this, new locationInfoRowChangeEvent(((locationInfoRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.locationInfoRowChanging != null))
				{
					this.locationInfoRowChanging(this, new locationInfoRowChangeEvent(((locationInfoRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.locationInfoRowDeleted != null))
				{
					this.locationInfoRowDeleted(this, new locationInfoRowChangeEvent(((locationInfoRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.locationInfoRowDeleting != null))
				{
					this.locationInfoRowDeleting(this, new locationInfoRowChangeEvent(((locationInfoRow)(e.Row)), e.Action));
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void RemovelocationInfoRow(locationInfoRow row)
			{
				this.Rows.Remove(row);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
			{
				System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
				System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
				NewDataSet ds = new NewDataSet();
				xs.Add(ds.GetSchemaSerializable());
				System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "locationInfoDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				return type;
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public partial class _eventRow : System.Data.DataRow
		{

			private _eventDataTable table_event;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal _eventRow(System.Data.DataRowBuilder rb)
				:
					base(rb)
			{
				this.table_event = ((_eventDataTable)(this.Table));
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string logger
			{
				get
				{
					try
					{
						return ((string)(this[this.table_event.loggerColumn]));
					}
					catch (System.InvalidCastException e)
					{
						throw new System.Data.StrongTypingException("The value for column \'logger\' in table \'event\' is DBNull.", e);
					}
				}
				set
				{
					this[this.table_event.loggerColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string timestamp
			{
				get
				{
					try
					{
						return ((string)(this[this.table_event.timestampColumn]));
					}
					catch (System.InvalidCastException e)
					{
						throw new System.Data.StrongTypingException("The value for column \'timestamp\' in table \'event\' is DBNull.", e);
					}
				}
				set
				{
					this[this.table_event.timestampColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string level
			{
				get
				{
					try
					{
						return ((string)(this[this.table_event.levelColumn]));
					}
					catch (System.InvalidCastException e)
					{
						throw new System.Data.StrongTypingException("The value for column \'level\' in table \'event\' is DBNull.", e);
					}
				}
				set
				{
					this[this.table_event.levelColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string thread
			{
				get
				{
					try
					{
						return ((string)(this[this.table_event.threadColumn]));
					}
					catch (System.InvalidCastException e)
					{
						throw new System.Data.StrongTypingException("The value for column \'thread\' in table \'event\' is DBNull.", e);
					}
				}
				set
				{
					this[this.table_event.threadColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int event_Id
			{
				get
				{
					return ((int)(this[this.table_event.event_IdColumn]));
				}
				set
				{
					this[this.table_event.event_IdColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsloggerNull()
			{
				return this.IsNull(this.table_event.loggerColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetloggerNull()
			{
				this[this.table_event.loggerColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IstimestampNull()
			{
				return this.IsNull(this.table_event.timestampColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SettimestampNull()
			{
				this[this.table_event.timestampColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IslevelNull()
			{
				return this.IsNull(this.table_event.levelColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetlevelNull()
			{
				this[this.table_event.levelColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsthreadNull()
			{
				return this.IsNull(this.table_event.threadColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetthreadNull()
			{
				this[this.table_event.threadColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public messageRow[] GetmessageRows()
			{
				return ((messageRow[])(base.GetChildRows(this.Table.ChildRelations["event_message"])));
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public propertiesRow[] GetpropertiesRows()
			{
				return ((propertiesRow[])(base.GetChildRows(this.Table.ChildRelations["event_properties"])));
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public throwableRow[] GetthrowableRows()
			{
				return ((throwableRow[])(base.GetChildRows(this.Table.ChildRelations["event_throwable"])));
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public locationInfoRow[] GetlocationInfoRows()
			{
				return ((locationInfoRow[])(base.GetChildRows(this.Table.ChildRelations["event_locationInfo"])));
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public partial class messageRow : System.Data.DataRow
		{

			private messageDataTable tablemessage;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal messageRow(System.Data.DataRowBuilder rb)
				:
					base(rb)
			{
				this.tablemessage = ((messageDataTable)(this.Table));
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string message_Text
			{
				get
				{
					try
					{
						return ((string)(this[this.tablemessage.message_TextColumn]));
					}
					catch (System.InvalidCastException e)
					{
						throw new System.Data.StrongTypingException("The value for column \'message_Text\' in table \'message\' is DBNull.", e);
					}
				}
				set
				{
					this[this.tablemessage.message_TextColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int event_Id
			{
				get
				{
					try
					{
						return ((int)(this[this.tablemessage.event_IdColumn]));
					}
					catch (System.InvalidCastException e)
					{
						throw new System.Data.StrongTypingException("The value for column \'event_Id\' in table \'message\' is DBNull.", e);
					}
				}
				set
				{
					this[this.tablemessage.event_IdColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public _eventRow eventRow
			{
				get
				{
					return ((_eventRow)(this.GetParentRow(this.Table.ParentRelations["event_message"])));
				}
				set
				{
					this.SetParentRow(value, this.Table.ParentRelations["event_message"]);
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool Ismessage_TextNull()
			{
				return this.IsNull(this.tablemessage.message_TextColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void Setmessage_TextNull()
			{
				this[this.tablemessage.message_TextColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool Isevent_IdNull()
			{
				return this.IsNull(this.tablemessage.event_IdColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void Setevent_IdNull()
			{
				this[this.tablemessage.event_IdColumn] = System.Convert.DBNull;
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public partial class propertiesRow : System.Data.DataRow
		{

			private propertiesDataTable tableproperties;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal propertiesRow(System.Data.DataRowBuilder rb)
				:
					base(rb)
			{
				this.tableproperties = ((propertiesDataTable)(this.Table));
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int properties_Id
			{
				get
				{
					return ((int)(this[this.tableproperties.properties_IdColumn]));
				}
				set
				{
					this[this.tableproperties.properties_IdColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int event_Id
			{
				get
				{
					try
					{
						return ((int)(this[this.tableproperties.event_IdColumn]));
					}
					catch (System.InvalidCastException e)
					{
						throw new System.Data.StrongTypingException("The value for column \'event_Id\' in table \'properties\' is DBNull.", e);
					}
				}
				set
				{
					this[this.tableproperties.event_IdColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public _eventRow eventRow
			{
				get
				{
					return ((_eventRow)(this.GetParentRow(this.Table.ParentRelations["event_properties"])));
				}
				set
				{
					this.SetParentRow(value, this.Table.ParentRelations["event_properties"]);
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool Isevent_IdNull()
			{
				return this.IsNull(this.tableproperties.event_IdColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void Setevent_IdNull()
			{
				this[this.tableproperties.event_IdColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public dataRow[] GetdataRows()
			{
				return ((dataRow[])(base.GetChildRows(this.Table.ChildRelations["properties_data"])));
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public partial class dataRow : System.Data.DataRow
		{

			private dataDataTable tabledata;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal dataRow(System.Data.DataRowBuilder rb)
				:
					base(rb)
			{
				this.tabledata = ((dataDataTable)(this.Table));
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string name
			{
				get
				{
					try
					{
						return ((string)(this[this.tabledata.nameColumn]));
					}
					catch (System.InvalidCastException e)
					{
						throw new System.Data.StrongTypingException("The value for column \'name\' in table \'data\' is DBNull.", e);
					}
				}
				set
				{
					this[this.tabledata.nameColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string value
			{
				get
				{
					try
					{
						return ((string)(this[this.tabledata.valueColumn]));
					}
					catch (System.InvalidCastException e)
					{
						throw new System.Data.StrongTypingException("The value for column \'value\' in table \'data\' is DBNull.", e);
					}
				}
				set
				{
					this[this.tabledata.valueColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int properties_Id
			{
				get
				{
					try
					{
						return ((int)(this[this.tabledata.properties_IdColumn]));
					}
					catch (System.InvalidCastException e)
					{
						throw new System.Data.StrongTypingException("The value for column \'properties_Id\' in table \'data\' is DBNull.", e);
					}
				}
				set
				{
					this[this.tabledata.properties_IdColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public propertiesRow propertiesRow
			{
				get
				{
					return ((propertiesRow)(this.GetParentRow(this.Table.ParentRelations["properties_data"])));
				}
				set
				{
					this.SetParentRow(value, this.Table.ParentRelations["properties_data"]);
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsnameNull()
			{
				return this.IsNull(this.tabledata.nameColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetnameNull()
			{
				this[this.tabledata.nameColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsvalueNull()
			{
				return this.IsNull(this.tabledata.valueColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetvalueNull()
			{
				this[this.tabledata.valueColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool Isproperties_IdNull()
			{
				return this.IsNull(this.tabledata.properties_IdColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void Setproperties_IdNull()
			{
				this[this.tabledata.properties_IdColumn] = System.Convert.DBNull;
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public partial class throwableRow : System.Data.DataRow
		{

			private throwableDataTable tablethrowable;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal throwableRow(System.Data.DataRowBuilder rb)
				:
					base(rb)
			{
				this.tablethrowable = ((throwableDataTable)(this.Table));
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string throwable_Text
			{
				get
				{
					try
					{
						return ((string)(this[this.tablethrowable.throwable_TextColumn]));
					}
					catch (System.InvalidCastException e)
					{
						throw new System.Data.StrongTypingException("The value for column \'throwable_Text\' in table \'throwable\' is DBNull.", e);
					}
				}
				set
				{
					this[this.tablethrowable.throwable_TextColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int event_Id
			{
				get
				{
					try
					{
						return ((int)(this[this.tablethrowable.event_IdColumn]));
					}
					catch (System.InvalidCastException e)
					{
						throw new System.Data.StrongTypingException("The value for column \'event_Id\' in table \'throwable\' is DBNull.", e);
					}
				}
				set
				{
					this[this.tablethrowable.event_IdColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public _eventRow eventRow
			{
				get
				{
					return ((_eventRow)(this.GetParentRow(this.Table.ParentRelations["event_throwable"])));
				}
				set
				{
					this.SetParentRow(value, this.Table.ParentRelations["event_throwable"]);
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool Isthrowable_TextNull()
			{
				return this.IsNull(this.tablethrowable.throwable_TextColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void Setthrowable_TextNull()
			{
				this[this.tablethrowable.throwable_TextColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool Isevent_IdNull()
			{
				return this.IsNull(this.tablethrowable.event_IdColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void Setevent_IdNull()
			{
				this[this.tablethrowable.event_IdColumn] = System.Convert.DBNull;
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public partial class locationInfoRow : System.Data.DataRow
		{

			private locationInfoDataTable tablelocationInfo;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			internal locationInfoRow(System.Data.DataRowBuilder rb)
				:
					base(rb)
			{
				this.tablelocationInfo = ((locationInfoDataTable)(this.Table));
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string _class
			{
				get
				{
					try
					{
						return ((string)(this[this.tablelocationInfo._classColumn]));
					}
					catch (System.InvalidCastException e)
					{
						throw new System.Data.StrongTypingException("The value for column \'class\' in table \'locationInfo\' is DBNull.", e);
					}
				}
				set
				{
					this[this.tablelocationInfo._classColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string method
			{
				get
				{
					try
					{
						return ((string)(this[this.tablelocationInfo.methodColumn]));
					}
					catch (System.InvalidCastException e)
					{
						throw new System.Data.StrongTypingException("The value for column \'method\' in table \'locationInfo\' is DBNull.", e);
					}
				}
				set
				{
					this[this.tablelocationInfo.methodColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string file
			{
				get
				{
					try
					{
						return ((string)(this[this.tablelocationInfo.fileColumn]));
					}
					catch (System.InvalidCastException e)
					{
						throw new System.Data.StrongTypingException("The value for column \'file\' in table \'locationInfo\' is DBNull.", e);
					}
				}
				set
				{
					this[this.tablelocationInfo.fileColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public string line
			{
				get
				{
					try
					{
						return ((string)(this[this.tablelocationInfo.lineColumn]));
					}
					catch (System.InvalidCastException e)
					{
						throw new System.Data.StrongTypingException("The value for column \'line\' in table \'locationInfo\' is DBNull.", e);
					}
				}
				set
				{
					this[this.tablelocationInfo.lineColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public int event_Id
			{
				get
				{
					try
					{
						return ((int)(this[this.tablelocationInfo.event_IdColumn]));
					}
					catch (System.InvalidCastException e)
					{
						throw new System.Data.StrongTypingException("The value for column \'event_Id\' in table \'locationInfo\' is DBNull.", e);
					}
				}
				set
				{
					this[this.tablelocationInfo.event_IdColumn] = value;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public _eventRow eventRow
			{
				get
				{
					return ((_eventRow)(this.GetParentRow(this.Table.ParentRelations["event_locationInfo"])));
				}
				set
				{
					this.SetParentRow(value, this.Table.ParentRelations["event_locationInfo"]);
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool Is_classNull()
			{
				return this.IsNull(this.tablelocationInfo._classColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void Set_classNull()
			{
				this[this.tablelocationInfo._classColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsmethodNull()
			{
				return this.IsNull(this.tablelocationInfo.methodColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetmethodNull()
			{
				this[this.tablelocationInfo.methodColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IsfileNull()
			{
				return this.IsNull(this.tablelocationInfo.fileColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetfileNull()
			{
				this[this.tablelocationInfo.fileColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool IslineNull()
			{
				return this.IsNull(this.tablelocationInfo.lineColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void SetlineNull()
			{
				this[this.tablelocationInfo.lineColumn] = System.Convert.DBNull;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public bool Isevent_IdNull()
			{
				return this.IsNull(this.tablelocationInfo.event_IdColumn);
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public void Setevent_IdNull()
			{
				this[this.tablelocationInfo.event_IdColumn] = System.Convert.DBNull;
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public class _eventRowChangeEvent : System.EventArgs
		{

			private _eventRow eventRow;

			private System.Data.DataRowAction eventAction;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public _eventRowChangeEvent(_eventRow row, System.Data.DataRowAction action)
			{
				this.eventRow = row;
				this.eventAction = action;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public _eventRow Row
			{
				get
				{
					return this.eventRow;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public class messageRowChangeEvent : System.EventArgs
		{

			private messageRow eventRow;

			private System.Data.DataRowAction eventAction;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public messageRowChangeEvent(messageRow row, System.Data.DataRowAction action)
			{
				this.eventRow = row;
				this.eventAction = action;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public messageRow Row
			{
				get
				{
					return this.eventRow;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public class propertiesRowChangeEvent : System.EventArgs
		{

			private propertiesRow eventRow;

			private System.Data.DataRowAction eventAction;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public propertiesRowChangeEvent(propertiesRow row, System.Data.DataRowAction action)
			{
				this.eventRow = row;
				this.eventAction = action;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public propertiesRow Row
			{
				get
				{
					return this.eventRow;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public class dataRowChangeEvent : System.EventArgs
		{

			private dataRow eventRow;

			private System.Data.DataRowAction eventAction;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public dataRowChangeEvent(dataRow row, System.Data.DataRowAction action)
			{
				this.eventRow = row;
				this.eventAction = action;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public dataRow Row
			{
				get
				{
					return this.eventRow;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public class throwableRowChangeEvent : System.EventArgs
		{

			private throwableRow eventRow;

			private System.Data.DataRowAction eventAction;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public throwableRowChangeEvent(throwableRow row, System.Data.DataRowAction action)
			{
				this.eventRow = row;
				this.eventAction = action;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public throwableRow Row
			{
				get
				{
					return this.eventRow;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
		public class locationInfoRowChangeEvent : System.EventArgs
		{

			private locationInfoRow eventRow;

			private System.Data.DataRowAction eventAction;

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public locationInfoRowChangeEvent(locationInfoRow row, System.Data.DataRowAction action)
			{
				this.eventRow = row;
				this.eventAction = action;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public locationInfoRow Row
			{
				get
				{
					return this.eventRow;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public System.Data.DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}
	}
}